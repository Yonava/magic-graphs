const u=({rootCoordinate:r,xOffset:i,yOffset:p,treeDepth:c})=>{const h=[r],f=Math.pow(2,c)*i;for(let t=1;t<=c;t++){const s=r.y+t*p,d=Math.pow(2,t),n=f/d,o=[];for(let e=0;e<d;e++)o[e]=(e-d/2+.5)*n;for(let e=0;e<d;e++)h.push({x:r.x+o[e],y:s})}return h.map(({x:t,y:s})=>({x:Math.round(t),y:Math.round(s)}))},a=({graph:r,root:i,treeDepth:p})=>{var t,s;const c=[],{getChildrenOfNode:h}=r.helpers;let f=[i.id];for(let d=0;d<=p;d++){const n=[];for(const o of f){if(c.push(o),!o){n.push(void 0),n.push(void 0);continue}const e=h(o);n.push((t=e[0])==null?void 0:t.id),n.push((s=e[1])==null?void 0:s.id)}f=[...n]}return c},l=(r,i,p,c)=>{const{xOffset:h,yOffset:f}=c,{depth:t}=p,s=new Map,d=u({rootCoordinate:i,xOffset:h,yOffset:f,treeDepth:t}),n=a({graph:r,root:i,treeDepth:t});for(let o=0;o<n.length;o++){const e=n[o];if(!e)continue;const x=d[o];s.set(e,x)}return s};export{l as a,u as g};
