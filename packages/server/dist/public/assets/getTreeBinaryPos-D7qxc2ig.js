const x=({rootCoordinate:r,xOffset:h,yOffset:p,treeDepth:c})=>{const i=[r],f=Math.pow(2,c)*h;for(let o=1;o<=c;o++){const s=r.y+o*p,d=Math.pow(2,o),n=f/d,t=[];for(let e=0;e<d;e++)t[e]=(e-d/2+.5)*n;for(let e=0;e<d;e++)i.push({x:r.x+t[e],y:s})}return i.map(({x:o,y:s})=>({x:Math.round(o),y:Math.round(s)}))},l=({graph:r,root:h,treeDepth:p})=>{var o,s;const c=[],{getChildrenOfNode:i}=r.helpers;let f=[h.id];for(let d=0;d<=p;d++){const n=[];for(const t of f){if(c.push(t),!t){n.push(void 0),n.push(void 0);continue}const e=i(t);n.push((o=e[0])==null?void 0:o.id),n.push((s=e[1])==null?void 0:s.id)}f=[...n]}return c},I=(r,h,p,c)=>{const i=[],{xOffset:f,yOffset:o}=c,{depth:s}=p,d=x({rootCoordinate:h,xOffset:f,yOffset:o,treeDepth:s}),n=l({graph:r,root:h,treeDepth:s});for(let t=0;t<n.length;t++){const e=n[t];if(!e)continue;const u=d[t];i.push({nodeId:e,coords:u})}return i};export{I as a,x as g};
